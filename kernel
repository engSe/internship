#include <fstream>
#include <iostream>

#include <string.h>
#include <cusolver_common.h>
#include <cuda_runtime.h>
#include <cuda.h>
#include <cusolverSp.h>
#include <cusparse.h>
#include <time.h>
#include <stdio.h>
#include  <iomanip>


using namespace std;

template <typename T>
T* vector_insert(int n, string filename, T a);

template <typename T>
void vector_output(int n, T * vectors, string filename);

int main(){

	string matlab = "C:/Users/Wonsik/Documents/MATLAB/";

	int n, nnz;
	// initial val 
	cout << "n and nnz" << endl;

	n = 733200;
	nnz = 83370228;
	/*cin >> n;


	nnz = n * 3 - 2;*/

	clock_t init = clock();
	//csr 
	double *result = new double[n];
	int *rowPtr = new   int[n + 1];
	int *colidx = new   int[nnz];
	double *csrval = new double[nnz];
	double *bvec = new double[n];


	// unsign int range
	if (nnz > 4294967295)
	{
		cout << 'e';
		return 1;
	}
	if (n > 4294967295)
		printf("warn");

	//input :::::::::input은 ascii code로 저장되어야 한다.

	clock_t start = clock();
	cout << 't' << start - init << endl;

	string finb = "bvec.txt";
	string finROW = "rowPtr_.txt";
	string finCOL = "colidx_.txt";
	string finVAL = "csrval.txt";
	string outtxt = "result.txt";

	/*string finb = "ex_b.txt";
	string finROW = "ex_row.txt";
	string finCOL = "ex_col.txt";
	string finVAL = "ex_val.txt";
	string outtxt = "ex_x_val.txt";*/

	

	double dou = 1.0;
	int uint = 1;




	bvec = vector_insert(n, matlab + finb, dou);
	rowPtr = vector_insert(n + 1, matlab + finROW, uint);

	colidx = vector_insert(nnz, matlab + finCOL, uint);
	csrval = vector_insert(nnz, matlab + finVAL, dou);
	
	clock_t insert = clock();

	cout << "insert t : " << insert - init << endl;
	//cuda alloc

	int* dCol, *dRow;
	double* dVal, *dbvec, *dx;
	cudaError_t error;

	cudaMalloc((void**)&dx, sizeof(double)*n);
	cudaMalloc((void**)&dbvec, sizeof(double)*n);
	cudaMalloc((void**)&dCol, sizeof(int)*nnz);
	cudaMalloc((void**)&dRow, sizeof(int)*(n + 1));
	cudaMalloc((void**)&dVal, sizeof(double)*nnz);



	cudaMemcpy(dbvec, bvec, sizeof(double)*n, cudaMemcpyHostToDevice);
	cudaMemcpy(dCol, colidx, sizeof(int)*nnz, cudaMemcpyHostToDevice);
	cudaMemcpy(dRow, rowPtr, sizeof(int)*(n + 1), cudaMemcpyHostToDevice);
	cudaMemcpy(dVal, csrval, sizeof(double)*nnz, cudaMemcpyHostToDevice);

	error = cudaGetLastError();
	cout << "Error status after cudaMemcpy in getmemInfo: " << cudaGetErrorString(error) << std::endl;



	free(bvec);
	free(csrval);
	free(colidx);
	free(rowPtr);



	clock_t cudamem = clock();
	cout << "cuda mem t : " << cudamem - insert << endl;

	//create and initialize library handles
	cusolverSpHandle_t cusolver_handle;
	cusparseHandle_t cusparse_handle;
	cusolverStatus_t cusolver_status;
	cusparseStatus_t cusparse_status;
	cusparse_status = cusparseCreate(&cusparse_handle);
	cout << "status cusparseCreate: " << cusparse_status << std::endl;
	cusolver_status = cusolverSpCreate(&cusolver_handle);
	cout << "status cusolverSpCreate: " << cusolver_status << std::endl;
	// solve
	cudaDeviceSynchronize();

	//double tol = 1e-8;

	double tol = 0;
	// --- prepare solving and copy to GPU:
	int reorder = 0;
	int singularity = 0;

	// create matrix descriptor
	cusparseMatDescr_t descrA;
	cusparse_status = cusparseCreateMatDescr(&descrA);
	cout << "status cusparse createMatDescr: " << cusparse_status << std::endl;

	cusparseSetMatType(descrA, CUSPARSE_MATRIX_TYPE_GENERAL);
	cusparseSetMatIndexBase(descrA, CUSPARSE_INDEX_BASE_ZERO);
	cusparseSetMatDiagType(descrA, CUSPARSE_DIAG_TYPE_NON_UNIT);
	cudaDeviceSynchronize();

	clock_t culib = clock();
	cout << "cuda lib t : " << culib - cudamem << endl;

	//solve the system

	size_t usage,total;

	cudaMemGetInfo(&usage, &total);

	cout << "mem :" << usage << ' ' << total<<endl;

	cusolver_status = cusolverSpDcsrlsvqr(cusolver_handle, n, nnz, descrA, dVal,
		dRow, dCol, dbvec, tol, reorder, dx,
		&singularity);


	

	cudaMemGetInfo(&usage, &total);

	cout << "mem :" << usage << ' ' << total << endl;

	cout << "singular :" << singularity << endl;
	//cusolver_status = cusolverSpDcsrlsvchol(cusolver_handle, n, nnz, descrA, dVal,
	//	dRow, dCol, dbvec, tol, reorder, dx,
	//	&singularity); 

	cudaDeviceSynchronize();

	error = cudaGetLastError();
	cout << "Error status after solve(): " << cudaGetErrorString(error) << std::endl;

	cudaDeviceSynchronize();

	clock_t solv = clock();

	cout << "solve t : " << solv - culib << endl;
	// return


	cudaMemcpy(result, dx, n*sizeof(double), cudaMemcpyDeviceToHost);
	cout << "total cuda t : " << clock() - insert << endl;

	// OUTPUT




	vector_output(n, result,matlab+ outtxt);
	vector_output(n, bvec, "bvecex.txt");

	vector_output(n + 1, rowPtr, "rowex.txt");

	vector_output(nnz, colidx, "colex.txt");

	vector_output(nnz, csrval, "valex.txt");

	clock_t output = clock();
	cout << "out t : " << output - solv << endl;


	int a;
	while (1){
		cout << "new solve";
		double ntol;
		cin >> a;
		if (a == 0)break;
		else if (a == 1){
			cout << tol;
			cin >> ntol;
			clock_t res = clock();
			cusolver_status = cusolverSpDcsrlsvqr(cusolver_handle, n, nnz, descrA, dVal,
				dRow, dCol, dbvec, tol, reorder, dx,
				&singularity);
			cudaMemcpy(result, dx, sizeof(double)*n, cudaMemcpyDeviceToHost);
			clock_t rend = clock();
			cout << rend - res << endl;
			vector_output(n, result, matlab + outtxt);
		}
		else if (a == 2){
			cin >> ntol;
			clock_t res = clock();
			cusolver_status = cusolverSpDcsrlsvchol(cusolver_handle, n, nnz, descrA, dVal,
				dRow, dCol, dbvec, tol, reorder, dx,
				&singularity);
			cudaMemcpy(result, dx, sizeof(double)*n, cudaMemcpyDeviceToHost);
			clock_t rend = clock();
			cout << rend - res << endl;
			vector_output(n, result, matlab + outtxt);




		}
		else if (a == 3){
			/*cin >> ntol;
			clock_t res = clock();
			cusolver_status = cusolverSpDcsrlsvlu(cusolver_handle, n, nnz, descrA, dVal,
			dRow, dCol, dbvec, tol, reorder, dx,
			&singularity);
			cudaMemcpy(result, dx, sizeof(double)*n, cudaMemcpyDeviceToHost);
			clock_t rend = clock();
			cout << rend - res << endl;
			vector_output(n, result, matlab+ outtxt);*/




		}

	}
	//free mem

	cudaFree(dCol);
	cudaFree(dRow);
	cudaFree(dx);
	cudaFree(dbvec);
	cudaFree(dVal);
	
	free(result);

	return 0;
}


//cuda function



/// 입출력
template <typename T>
void vector_output(int n, T * vectors, string filename){

	ofstream file(filename);
	if (!file)
	{
		cout << "file output error" << endl;

	}
	int i = 0;
	while (i<n&&file)
	{
		file << setprecision(20) << vectors[i] << '\n';

		i++;
	}
	file.close();
}
template <typename T>
T* vector_insert(int n, string filename, T a){

	ifstream file;
	file.open(filename);

	if (!file)
	{
		cout << "file input error" << endl;

	}

	T *vectors = new T[n];
	int i = 0;
	double in;
	while (file >> setprecision(20) >> in){
		
		vectors[i] = (T)in;
		i++;
	}
	if (i != n)cout << "input suspended" << endl;

	file.close();
	return vectors;
}
